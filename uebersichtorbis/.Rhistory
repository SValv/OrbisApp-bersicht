at = list(bfst = values),
category = cat))$Prediction
)
}
prob <- data.frame(prob)
names(prob) <- c("bfst", levels(mz$lfstat))
prob
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name))+geom_line()+geom_point()+theme_bw() + labs(y="Pr(y = m|X)",x="Familienstand") +
scale_x_discrete(labels= c("Ledig", "Verheiratet", "Verwitwet", "Geschieden"))
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name))+geom_line()+geom_point()+theme_bw() + labs(y="Pr(y = m|X)",x="Familienstand") +
scale_x_discrete(breaks=c(1,2,3,4),labels= c("Ledig", "Verheiratet", "Verwitwet", "Geschieden"))
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name))+geom_line()+geom_point()+theme_bw() + labs(y="Pr(y = m|X)",x="Familienstand") +scale_x_discrete(breaks=c(1,2,3,4),labels= c("Ledig", "Verheiratet", "Verwitwet", "Geschieden"))
?scale_x_discrete
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") #+ scale_x_discrete(labels= c("Ledig", "Verheiratet", "Verwitwet", "Geschieden"))
plot(Stay ~ age, data = prob,
type = "l", ylim = c(0, 1),
ylab = "Pr(y = m|X)")
lines(Migrate ~ age, data = prob, col = "red")
lines(Commute ~ age, data = prob, col = "blue")
plot(Vollzeit ~ bfst, data = prob,
type = "b", ylim = c(0, 1),
xaxp = c(1, 4, 3),
ylab = "Pr(y = m|X)",
xlab = "Familienstand (1 = Ledig, 2 = Verheiratet,
3 = Verwitwet, 4 = Geschieden)")
points(Teilzeit ~ bfst, data = prob,
type = "b", col = "red")
points(Arbeitslos ~ bfst, data = prob,
type = "b", col = "blue")
points(Nicht-erwerbst?tig ~ bfst, data = prob,
type = "b", col = "blue")
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1))
unique(prob$bfst)
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1)) +
scale_x_discrete(name="",breaks=c(1,2,3,4),labels= c("Ledig", "Verheiratet", "Verwitwet", "Geschieden"))
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1)) +
scale_x_discrete(name="",breaks=c(1,2,3,4),labels= c(4,3,2,1))
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1)) +
scale_x_continuous(name="",breaks=c(1,2,3,4),labels= c(4,3,2,1))
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1)) +
scale_x_continuous(name="")
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1))
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1)) + scale_x_binned(name="")
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1))
prob$bfst=as.factor(c("Ledig", "Verheiratet", "Verwitwet", "Geschieden"))
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1))
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name, group=bfst))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1))
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name, group=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1))
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1))
values <- levels(mz$bfst)
prob <- cbind(1:4)
for (cat in levels(mz$lfstat)) {
prob <- cbind(prob, summary(
prediction(mnl,
at = list(bfst = values),
category = cat))$Prediction
)
}
prob <- data.frame(prob)
names(prob) <- c("bfst", levels(mz$lfstat))
prob$bfst=as.factor(c("Ledig", "Verheiratet", "Verwitwet", "Geschieden"))
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name, group=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1))
View(prob)
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name, group=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1))
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name, group=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1))+ scale_x_discrete(name="")
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name, group=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1))+ scale_x_manual(name=" ")
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name, group=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1))+ scale_x_binned(name="")
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name, group=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1))+ scale_x_discrete(limits=c("Ledig", "Verheiratet", "Verwitwet", "Geschieden"))
nama=c("Ledig", "Verheiratet", "Verwitwet", "Geschieden")
prob$bfst=as.factor(nama)
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name, group=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1))+
scale_x_discrete(limits=nama)
plot(Vollzeit ~ bfst, data = prob,
type = "b", ylim = c(0, 1),
xaxp = c(1, 4, 3),
ylab = "Pr(y = m|X)",
xlab = "Familienstand (1 = Ledig, 2 = Verheiratet,
3 = Verwitwet, 4 = Geschieden)")
points(Teilzeit ~ bfst, data = prob,
type = "b", col = "red")
points(Arbeitslos ~ bfst, data = prob,
type = "b", col = "blue")
points(Nicht-erwerbst?tig ~ bfst, data = prob,
type = "b", col = "blue")
values <- levels(mz$bfst)
prob <- cbind(1:4)
for (cat in levels(mz$lfstat)) {
prob <- cbind(prob, summary(
prediction(mnl,
at = list(bfst = values),
category = cat))$Prediction
)
}
prob <- data.frame(prob)
names(prob) <- c("bfst", levels(mz$lfstat))
nama=c("Ledig", "Verheiratet", "Verwitwet", "Geschieden")
prob$bfst=as.factor(nama)
prob %>% pivot_longer(-bfst) %>%
ggplot(aes(x=bfst,y=value,color=name, group=name))+geom_line()+geom_point()+theme_bw() +
labs(y="Pr(y = m|X)",x="Familienstand") + coord_cartesian(ylim = c(0,1))+
scale_x_discrete(limits=nama)
values <- levels(mz$bfst)
prob <- cbind(1:4)
for (cat in levels(mz$lfstat)) {
prob <- cbind(prob, summary(
prediction(mnl,
at = list(bfst = values),
category = cat))$Prediction
)
}
prob <- data.frame(prob)
names(prob) <- c("bfst", levels(mz$lfstat))
prob
plot(Vollzeit ~ bfst, data = prob,
type = "b", ylim = c(0, 1),
xaxp = c(1, 4, 3),
ylab = "Pr(y = m|X)",
xlab = "Familienstand (1 = Ledig, 2 = Verheiratet,
3 = Verwitwet, 4 = Geschieden)")
points(Teilzeit ~ bfst, data = prob,
type = "b", col = "red")
points(Arbeitslos ~ bfst, data = prob,
type = "b", col = "blue")
points(Nicht-erwerbst?tig ~ bfst, data = prob,
type = "b", col = "blue")
plot(Effect(c("bfst"), mnl),
axes = list(y = list(style = "stacked"),
x = list(rug = FALSE)),
lines = list(col = c("red", "blue", "green", "violet")))
S(mnl.int,exponentiate=T)
S(mnl, exponentiate = T)
S(mnl2, exponentiate = T)
install.packages('gsheet')
library(gsheet)
rm(list=ls())
DF=gsheet2tbl('https://docs.google.com/spreadsheets/d/1pxBP-J_CUCamMeEdShhxomC7PJO_IjyzICGJfhUO-1Y/edit#gid=0')
View(DF)
DF=gsheet2tbl('https://docs.google.com/spreadsheets/d/1pxBP-J_CUCamMeEdShhxomC7PJO_IjyzICGJfhUO-1Y/edit#gid=0')
View(DF)
shiny::runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
#Verwendete packages
pacman::p_load(shiny,shinydashboard,shinythemes,ggplot2,dashboardthemes)
Abtlist<-c("","Marketing","Blub","Blab")
Header<- dashboardHeader(title ="Orbis Astera Übersicht")
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem(text="Datenübersicht",tabName="Daten"),
menuItem(text="Beitraganalytics",tabName="Analytics"),
menuItem(text="Zusätzliches",tabName="Zusatz")
)
)
body <- dashboardBody(
# Create a tabBox
tabItems(
tabItem(
tabName = "Daten",
fluidRow(
)
),
tabItem(tabName = "Analytics"),
tabItem(tabName = "Zusatz"),
)
)
body <- dashboardBody(
# Create a tabBox
tabItems(
tabItem(
tabName = "Daten",
fluidRow(
)
),
tabItem(tabName = "Analytics"),
tabItem(tabName = "Zusatz")
)
)
# Use the new sidebar
ui <- dashboardPage(skin="black",
header = Header,
sidebar = sidebar,
body = body
)
server <- function(input, output) {
}
shinyApp(ui, server)
View(DF)
View(DF)
sortbyprio=function(df){
vec=c()
for (i in df$Priorität){
if(i == "Sehr Hoch"){
vec=c(vec,1)
} else if (i == "Hoch"){
vec=c(vec,2)
} else if (i == "Mittel"){
vec=c(vec,3)
} else if (i == "Niedrig"){
vec=c(vec,4)
}
}
df$sorter=vec
df=df %>% arrange(sorter)
return(df[,1:6])
}
sortbyprio(DF)
View(DF)
DF=gsheet2tbl('https://docs.google.com/spreadsheets/d/1pxBP-J_CUCamMeEdShhxomC7PJO_IjyzICGJfhUO-1Y/edit#gid=0')
sortbyprio=function(df){
vec=c()
for (i in df$Priorität){
if(i == "Sehr Hoch"){
vec=c(vec,1)
} else if (i == "Hoch"){
vec=c(vec,2)
} else if (i == "Mittel"){
vec=c(vec,3)
} else if (i == "Niedrig"){
vec=c(vec,4)
}
}
df$sorter=vec
df=df %>% arrange(sorter)
return(df[,1:6])
}
sortbyprio(DF)
library(gsheet)
library(DT)
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
View(DF)
DF %>% pivot_longer(-c(Task,Status,Priorität))
DF %>% pivot_longer(-c(Task,Status,Priorität,Notizen))
?pivot_longer
sum(DF$Status == "Done")
unique(DF$Status)
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>% group_by(Autor) %>%
summarise(Done=sum(DF$Status == "Done"),
ToDo=sum(DF$Status == "To Do"),
partly=sum(DF$Status == "Partly Done"),
impl=sum(DF$Status == "Nur noch implementieren"))
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>% group_by(Autor) %>%
summarise(Done=sum(Status == "Done"),
ToDo=sum(Status == "To Do"),
partly=sum(Status == "Partly Done"),
impl=sum(Status == "Nur noch implementieren"))
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>% group_by(Autor) %>%
summarise(Done=sum(Status == "Done"),
ToDo=sum(Status == "To Do"),
partly=sum(Status == "Partly Done"),
impl=sum(Status == "Nur noch implementieren")) %>%
na.omit()
DF %>%
# Nach autor
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>% group_by(Autor) %>%
summarise(Done=sum(Status == "Done"),
ToDo=sum(Status == "To Do"),
partly=sum(Status == "Partly Done"),
impl=sum(Status == "Nur noch implementieren"),
Summe=sum(Done,ToDo,partly,impl)) %>%
na.omit()
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>% group_by(Autor) %>%
summarise(Done=sum(Status == "Done"),
ToDo=sum(Status == "To Do"),
partly=sum(Status == "Partly Done"),
impl=sum(Status == "Nur noch implementieren"),
Summe=sum(Done,ToDo,partly,impl)) %>%
na.omit()
DF %>% ggplot(aes(x=Priorität))+geom_bar()
?scale_x_discrete
DF %>% ggplot(aes(x=Priorität,fill=Priorität))+geom_bar()+
theme_bw()+scale_x_discrete(limits=c("Sehr Hoch","Hoch","Mittel","Niedrig"))
DF %>% ggplot(aes(x=Priorität,fill=Priorität))+geom_bar()+
theme_bw()+scale_x_discrete(limits=c("Sehr Hoch","Hoch","Mittel","Niedrig"))+ labs(title="Prioritätenverteilung",y="Anzahl")
DF %>% ggplot(aes(x=Priorität,fill=Priorität))+geom_bar()+
theme_bw()+scale_x_discrete(limits=c("Sehr Hoch","Hoch","Mittel","Niedrig"))+
labs(title="Prioritätenverteilung",y="Anzahl") %>%
ggplotly()
library(plotly)
DF %>% ggplot(aes(x=Priorität,fill=Priorität))+geom_bar()+
theme_bw()+scale_x_discrete(limits=c("Sehr Hoch","Hoch","Mittel","Niedrig"))+
labs(title="Prioritätenverteilung",y="Anzahl") %>%
ggplotly()
ggplotly(plota)
plota=DF %>% ggplot(aes(x=Priorität,fill=Priorität))+geom_bar()+
theme_bw()+scale_x_discrete(limits=c("Sehr Hoch","Hoch","Mittel","Niedrig"))+
labs(title="Prioritätenverteilung",y="Anzahl")
ggplotly(plota)
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
DF %>% group_by(Priorität) %>% count()
DF %>% group_by(Priorität) %>% count() %>% rename(n=Anzahl)
DF %>% group_by(Priorität) %>% count() %>% rename(n="Anzahl")
DF %>% group_by(Priorität) %>% count() %>% rename(Anzahl=n)
# Nach autor
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>%
group_by(Autor) %>%
summarise(Done=sum(Status == "Done"),
`To Do`=sum(Status == "To Do"),
`Partly Done`=sum(Status == "Partly Done"),
`Nur noch implementieren`=sum(Status == "Nur noch implementieren"),
Summe=sum(Done,`To Do`,`Partly Done`,`Nur noch implementieren`)) %>%
na.omit()
DF %>% group_by(Priorität) %>% count() %>% rename(Anzahl=n)
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
tableOutput()
?tableOutput
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
?column
?rows
?row
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
?fluidRow
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
DF %>% group_by(Status) %>% count() %>% rename(Anzahl=n)
DF %>% ggplot(aes(x=Status,fill=Status))+geom_bar()+
theme_bw()+scale_x_discrete(limits=c("To Do","Partly Done","Nur noch implementieren","Done"))+
labs(title="Statusverteilung",y="Anzahl")
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor")
# Nach autor
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>%
ggplot(aes(x=Autor))+geom_bar()
# Nach autor
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>% na.omit() %>%
ggplot(aes(x=Autor))+geom_bar()
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>% na.omit() %>%
ggplot(aes(x=Autor))+geom_bar()
# Nach autor
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>%# na.omit() %>%
ggplot(aes(x=Autor))+geom_bar()
# Nach autor
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>% na.omit()# %>%
# Nach autor
DDF=DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>% na.omit()# %>%
table(DDF$Autor)
# Nach autor
DDF=DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>% na.omit(Autor)# %>%
table(DDF$Autor)
?na.omit
# Nach autor
DDF=DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>% filter(!is.na(Autor))# %>%
table(DDF$Autor)
DDF=DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor")
table(DDF$Autor)
DF=gsheet2tbl('https://docs.google.com/spreadsheets/d/1pxBP-J_CUCamMeEdShhxomC7PJO_IjyzICGJfhUO-1Y/edit#gid=0')
DDF=DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor")
table(DDF$Autor)
# Nach autor
DDF=DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>% filter(!is.na(Autor)) %>%
ggplot(aes(x=Autor))+geom_bar()
# Nach autor
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>% filter(!is.na(Autor)) %>%
ggplot(aes(x=Autor))+geom_bar()
# Nach autor
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>% filter(!is.na(Autor)) %>%
ggplot(aes(x=Autor, fill=Autor))+geom_bar()
# Nach autor
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>% filter(!is.na(Autor)) %>%
ggplot(aes(x=Autor, fill=Autor))+geom_bar()+theme_bw()
# Nach autor
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>% filter(!is.na(Autor)) %>%
ggplot(aes(x=Autor, fill=Autor))+geom_bar()+theme_bw()+labs(y="Anzahl",title="Tasks nach Autor")
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp()
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
sortbyprio=function(df){
vec=c()
for (i in df$Priorität){
if(i == "Sehr Hoch"){
vec=c(vec,1)
} else if (i == "Hoch"){
vec=c(vec,2)
} else if (i == "Mittel"){
vec=c(vec,3)
} else if (i == "Niedrig"){
vec=c(vec,4)
}
}
df$sorter=vec
df=df %>% arrange(sorter)
return(df[,1:6])
}
getToDoDaten=function(DF){
DF=DF %>% filter(Status != "Done")
return(DF)
}
getandmanip=function(Path){
DF=gsheet2tbl(Path)
DF=sortbyprio(DF)
return(DF)
}
getBarplotPrio=function(DF){
plota=DF %>% ggplot(aes(x=Priorität,fill=Priorität))+geom_bar()+
theme_bw()+scale_x_discrete(limits=c("Sehr Hoch","Hoch","Mittel","Niedrig"))+
labs(title="Prioritätenverteilung",y="Anzahl")
return(ggplotly(plota))
}
makeTableBesidesPrio=function(DF){
DF=DF %>% group_by(Priorität) %>% count() %>% rename(Anzahl=n)
return(DF)
}
getBarplotStatus=function(DF){
plota=DF %>% ggplot(aes(x=Status,fill=Status))+geom_bar()+
theme_bw()+scale_x_discrete(limits=c("To Do","Partly Done","Nur noch implementieren","Done"))+
labs(title="Statusverteilung",y="Anzahl")
return(ggplotly(plota))
}
makeTableBesidesStatus=function(DF){
DF %>% group_by(Status) %>% count() %>% rename(Anzahl=n)
return(DF)
}
getBarplotAutors=function(DF){
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>% filter(!is.na(Autor)) %>%
ggplot(aes(x=Autor, fill=Autor))+geom_bar()+theme_bw()+labs(y="Anzahl",title="Tasks nach Autor") -> plota
return(ggplotly(plota))
}
makeTableAutors=function(DF){
DF %>% pivot_longer(-c(Task, Status, Priorität, Notizen), values_to = "Autor") %>%
group_by(Autor) %>%
summarise(Done=sum(Status == "Done"),
ToDo=sum(Status == "To Do"),
Partly=sum(Status == "Partly Done"),
implem=sum(Status == "Nur noch implementieren"),
Summe=sum(Done,ToDo,Partly,implem)) %>%
na.omit() -> DF
colnamesDF=c("Done","To Do", "Partly Done","Nur noch implementieren")
return(DF)
}
makeTableAutors(DF)
makeTableBesidesStatus(DF)
makeTableBesidesStatus=function(DF){
DF=DF %>% group_by(Status) %>% count() %>% rename(Anzahl=n)
return(DF)
}
makeTableBesidesStatus(DF)
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
View(DF)
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
?ggplotly
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
runApp('E:/Arbeitsordner/OrbisApplook/uebersichtorbis')
